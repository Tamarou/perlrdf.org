<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML+RDFa 1.0//EN" 
   "http://www.w3.org/MarkUp/DTD/xhtml-rdfa-1.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"       
      xmlns:foaf="http://xmlns.com/foaf/0.1/"
      xmlns:cc="http://creativecommons.org/ns#"
      xmlns:dc="http://purl.org/dc/terms/"
      lang="en" xml:lang="en"> 
<head> 
  <title>Introduction to working on LOD with Perl</title> 
  <meta name="copyright" 
   content="Copyright &#169; 2010 Kjetil Kjernsmo Creative Commons Attribution-Sharealike" /> 
  <meta name="duration" content="15" />
  <link rel="stylesheet" type="text/css" media="screen, projection, print" 
   href="http://www.w3.org/Talks/Tools/Slidy2/styles/slidy.css" /> 
  <link rel="stylesheet" type="text/css" media="screen, projection, print" 
   href="kjetil-blue.css" /> 
  <script src="http://www.w3.org/Talks/Tools/Slidy2/scripts/slidy.js" 
   charset="utf-8" type="text/javascript"></script> 
  <style type="text/css"> 
    <!-- your custom style rules --> 
  </style> 
</head>
<body>

<div class="slide cover title">

  <h1 rel="dc:title">Introduction to working on LOD with Perl</h1>
  
  <p>
    <a href="http://www.perlrdf.org/slides/perlrdf-intro.xhtml" property="cc:attributionName" rel="cc:attributionURL">Kjetil Kjernsmo</a> &lt;kjetil@kjernsmo.net&gt;.
  </p>

  <p>
    Presentation at the <a href="http://www.opendataday.org/wiki/Oslo">Linked Open Data Hackfest</a>, Oslo, 2010-01-04.
  </p>

  <p>
    <tt>http://www.perlrdf.org/slides/perlrdf-intro.xhtml</tt>
  </p>

  <p>
    To install:
  </p>
<pre>
wget --no-check-certificate -O - http://cpanmin.us/ | perl - RDF::LinkedData
</pre>



  <p style="position:absolute; right:50px; bottom:100px; font-size: 10px">  
    <a rel="cc:license" href="http://creativecommons.org/licenses/by-sa/3.0/no/">Creative Commons Attribution-Sharealike 3.0 Norway License</a>.
  </p>
  
</div>

<div class="slide">
  <h1>Important modules</h1>

  <ul>
    <li><a href="http://search.cpan.org/dist/RDF-Trine/">RDF::Trine</a>. De facto standard low-level API, also containing parsers, serializers, etc.</li>
    <li><a href="http://search.cpan.org/dist/RDF-Query/">RDF::Query</a>. First complete SPARQL 1.1 implementation.</li>    
    <li><a href="http://search.cpan.org/dist/RDF-Query-Client/">RDF::Query::Client</a>. Use RDF::Trine API against remote SPARQL servers.</li>
    <li><a href="http://search.cpan.org/dist/Redland/">RDF::Redland</a>. Interface to the C-based Redland library.</li>
    <li><a href="http://search.cpan.org/dist/Test-RDF/">Test::RDF</a>. Test RDF data for validity and equality.</li>

    <li><a href="http://search.cpan.org/dist/RDF-TrineShortcuts/">RDF::TrineShortcuts</a>. Command-line RDF tools, parts of a high-level API.</li>

    <li><a href="http://search.cpan.org/dist/Web-Scraper/">Web::Scraper</a>. Toolkit using HTML and CSS Selectors or XPath expressions.</li>
    <li><a href="http://search.cpan.org/dist/RDF-Endpoint/">RDF::Endpoint</a>. Easy setup SPARQL 1.1 Endpoint.</li>
    <li><a href="http://search.cpan.org/dist/RDF-LinkedData/">RDF::LinkedData</a>. Easy setup Linked Data server conforming to best practices.</li>
    <li><a href="http://search.cpan.org/dist/RDF-RDFa-Parser/">RDF::RDFa::Parser</a>. RDFa parser.</li>
    <li><a href="http://search.cpan.org/dist/CGI-Auth-FOAF_SSL/">CGI::Auth::FOAF_SSL</a>. FOAF+SSL support (WebID-protocol).</li>
    <li><a href="http://search.cpan.org/dist/RDF-ACL/">RDF::ACL</a>. Access Control Lists based on WebIDs.</li>
    <li><a href="http://search.cpan.org/dist/XML-GRDDL/">XML::GRDDL</a>, <a href="http://search.cpan.org/dist/HTML-Microformats/">HTML::Microformats</a>, <a href="http://search.cpan.org/dist/HTML-HTML5-Microdata-Parser/">HTML::HTML5::Microdata::Parser</a> all give RDF::Trine models.</li>
  </ul>

  <p>
    And many more of differing relevance and maturity.
  </p>
</div>



<div class="slide">
<h1>Resource Description Framework (RDF)</h1>



<ol>
  <li>From two documents to a triple.
  <ul><li>Subject - Predicate - Object</li></ul>
  </li>
  <li>Add semantics to the link.</li>
  <li>Generalize the URI to identify anything.</li>
  <li>The object can be a string (with language or datatype).</li>
  <li>A collection of triples can be named with a URI.</li>
</ol>

</div>

<div class="slide">
<h1><tt>RDF::Trine</tt></h1>

<h2>Node types:</h2>

<p>
Important nodes: <tt>RDF::Trine::Node::Literal</tt>, <tt>RDF::Trine::Node::Resource</tt>, e.g:
</p>
<pre>
my $subject = RDF::Trine::Node::Resource->new('http://example.org/aircraft/B787');
my $predicate = RDF::Trine::Node::Resource->new('http://purl.org/dc/terms/title');
my $object = RDF::Trine::Node::Literal->new('Boeing 787', 'en');
</pre>


<p>
Other node types: <tt>RDF::Trine::Node::Literal::XML</tt>, <tt>RDF::Trine::Node::Blank</tt>, 
<tt>RDF::Trine::Node::Variable</tt>, <tt>RDF::Trine::Node::Nil</tt>
</p>

</div>

<div class="slide">
<h1><tt>RDF::Trine</tt></h1>

<h2>Statement:</h2>

<pre>
my $statement = RDF::Trine::Statement->new($subject, $predicate, $object);
</pre>


<p>
There's also <tt>RDF::Trine::Statement::Quad</tt>.
</p>

</div>

<div class="slide">
<h1><tt>RDF::Trine</tt></h1>

<h2>Stores:</h2>

<ul>
  <li>RDBMSes: MySQL, PostgreSQL, SQLite</li>
  <li>Hexastore</li>
  <li>Memory</li>
  <li>Redland (which again interfaces to e.g. 4store and Virtuoso).</li>
  <li>SPARQL (which makes Trine usable on any SPARQL 1.1 Endpoint).</li>
</ul>

<pre>
my $store = RDF::Trine::Store->new_with_config({
                                  storetype => 'DBI',
                                  name      => 'mymodel',
                                  dsn       => 'DBI:mysql:database=rdf',
                                  username  => 'dahut',
                                  password  => 'Str0ngPa55w0RD'
                                 });
</pre>
  
</div>


<div class="slide">
<h1><tt>RDF::Trine</tt></h1>

<h2>Models:</h2>

<p>Various classes, for filtering, for doing unions properly, etc.</p>
<p>
Typically, you would do:
</p>
<pre>
my $model = RDF::Trine::Model->new($store);
</pre>
<p>or for experiments or temporary stuff:</p>
<pre>
my $model = RDF::Trine::Model->temporary_model;
</pre>
<p>
Then, you can add your statement:
</p>
<pre>
$model->add_statement($statement);
</pre>
</div>


<div class="slide">
<h1><tt>RDF::Trine</tt></h1>

<h2>Parsers:</h2>

<p>RDF/XML, Turtle, NQuads, NTriples, RDF/JSON, RDFa, TriG</p>
<p>
Also, interface to Redland C parsers.
</p>
  
<pre>
my $parser = RDF::Trine::Parser->new( 'turtle' );
$parser->parse_file_into_model( $base_uri, 'data.ttl', $model );
</pre>

</div>

<div class="slide">
<h1><tt>RDF::Trine</tt></h1>

<h2>Iterators:</h2>

<p>
Used to manipulate data or SPARQL results iteratively, typically:
</p>
  
<pre>
my $iterator = RDF::Trine::Iterator::Graph->new( \@data );
while (my $statement = $iterator->next) {
       # do something with $statement
}
</pre>

</div>


<div class="slide">
<h1><tt>RDF::Trine</tt></h1>

<h2>Serializers:</h2>

<p>RDF/XML, Turtle, NQuads, NTriples, RDF/JSON</p>

<p>
From <tt>RDF::LinkedData</tt>:
</p>
<pre>
my ($type, $s) = RDF::Trine::Serializer->negotiate(
                                         'request_headers' => $self->headers_in,
                                         base => $self->base,
                                         namespaces => $self->namespaces);
my $iterator = $model->bounded_description($node);
$output = $s->serialize_iterator_to_string ( $iterator );
</pre>

</div>

<div class="slide">
<h1><tt>RDF::Query</tt></h1>

<p>Leading complete SPARQL 1.1 implementation!</p>

<p>Has no store on its own, that's all in <tt>RDF::Trine::Store</tt>.</p>

<p>Has a long list of classes:</p>
<ul>
  <li>Algebra, node, function and expression classes for manipulating query components</li>
  <li>Query parser classes (RDQL, SPARQL 1.0 and SPARQL 1.1)</li>
  <li>Plan classes for creating query plans</li>
  <li>Optimizer</li>
  <li>etc.</li>
</ul>

<p>You're not very likely to use most of this!</p>

</div>

<div class="slide">
<h1><tt>RDF::Query</tt></h1>

<pre>
use strict;
use warnings;
use RDF::Trine;
use RDF::Query;

my $model = RDF::Trine::Model->temporary_model;
my $parser = RDF::Trine::Parser->new( 'turtle' );

my $turtle =&lt;&lt;'EOD';<span style="color:pink">
@prefix foaf: &lt;http://xmlns.com/foaf/0.1/> .
@prefix rel: &lt;http://purl.org/vocab/relationship/> .
@prefix bio: &lt;http://purl.org/vocab/bio/0.1/> .
@prefix xsd: &lt;http://www.w3.org/2001/XMLSchema#> .

&lt;http://www.kjetil.kjernsmo.net/foaf#me> a foaf:Person ;
    foaf:name "Kjetil Kjernsmo" ;
    rel:parentOf &lt;http://synne.kjernsmo.net/foaf#me> .

&lt;http://synne.kjernsmo.net/foaf#me> a foaf:Person ;
    foaf:givenName "Synne" ;
    bio:event [ bio:date "2008-11-25"^^xsd:date ;
                        a bio:Birth ] .</span>
EOD

$parser->parse_into_model( 'http://example.org/', $turtle, $model );

my $sparql=&lt;&lt;EOQ;<span style="color:pink">
PREFIX foaf: &lt;http://xmlns.com/foaf/0.1/>
PREFIX rel: &lt;http://purl.org/vocab/relationship/>
PREFIX xsd: &lt;http://www.w3.org/2001/XMLSchema#>
SELECT ?childname WHERE {
        ?parent a foaf:Person ;
                rel:parentOf ?child .
          ?child  foaf:givenName ?childname .
        }</span>
EOQ

my $query = RDF::Query->new( $sparql );
my $iterator = $query->execute( $model );
while (my $row = $iterator->next) {
       print $row->{ 'childname' }->as_string;
    }
</pre>
</div>

<div class="slide">
<h1><tt>Test::RDF</tt></h1>

<p>Always start writing tests!</p>
<pre>
use Test::More tests => 3;
use Test::RDF;
is_valid_rdf(<span style="color:pink">'&lt;/foo> &lt;http://www.w3.org/2000/01/rdf-schema#label> "This is a Another test"@en .'
</span>, <span style="color:pink">'turtle'</span>, <span style="color:pink">'Valid turtle'</span>);
is_rdf(<span style="color:pink">'&lt;/foo> &lt;http://www.w3.org/2000/01/rdf-schema#label> "This is a Another test"@en .'</span>, <span style="color:pink">'turtle'</span>, 
       <span style="color:pink">'&lt;?xml version="1.0" encoding="utf-8"?>&lt;rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">&lt;rdf:Description rdf:about="/foo">&lt;ns0:label xmlns:ns0="http://www.w3.org/2000/01/rdf-schema#" xml:lang="en">This is a Another test&lt;/ns0:label>&lt;/rdf:Description>&lt;/rdf:RDF>'</span>, 
       <span style="color:pink">'rdfxml'</span>, <span style="color:pink">'Compare RDF/XML and Turtle'</span>);

isomorph_graphs($model1, $model2, <span style="color:pink">'Compare two models'</span>);
</pre>



</div>


<div class="slide">
  <h1>Quick install of RDF::LinkedData</h1>
  <p>  
    On Ubuntu Maverick / Debian Squeeze, do first:
  </p>
<pre>
apt-get install libtest-nowarnings-perl libwww-perl libtest-www-mechanize-perl \
libtry-tiny-perl libplack-perl libtext-table-perl libtext-csv-perl \ 
libunicode-string-perl liblist-moreutils-perl libdbd-sqlite3-perl \
libtest-json-perl libmath-combinatorics-perl libxml-namespacesupport-perl \
libxml-libxml-perl liberror-perl libdigest-sha1-perl libset-scalar-perl \
libjson-perl libmoosex-log-log4perl-perl libnamespace-autoclean-perl \
libconfig-jfdi-perl
</pre>
<p>
Then, to install the Linked Data module in your home directory, go:
</p>
<pre>
wget --no-check-certificate -O - http://cpanmin.us/ | perl - RDF::LinkedData
</pre>
</div>
<div class="slide">
 <h1>Configuring RDF::LinkedData</h1>
 
<p>Set environment:</p>
<pre>
export PERL5LIB=$HOME/perl5/lib/perl5
export PATH=$PATH:$HOME/perl5/bin
</pre>
<p>Then go</p>
<pre>
cd ~/.cpanm/latest-build/RDF-LinkedData-0.14/
wget http://svn.kjernsmo.net/talks/matrikkel1.ttl
</pre>
<p>
Edit <tt>rdf_linkeddata.json</tt> in there to read:
</p>
<pre>
{
  "base"  : "http://localhost:3000/matrikkel/",
  "store" : {
       "storetype"  : "Hexastore",
       "sources" : [ { 
                     "file" : "matrikkel1.ttl",
                     "syntax" : "turtle" 
                   } ], 
             },                          
}
</pre>
</div>

<div class="slide">
  <h1>Running RDF::LinkedData basic server</h1>

<pre>
plackup script/linked_data.psgi --host localhost --port 3000     
</pre>
<p>
Go to <a href="http://localhost:3000/matrikkel/6"><tt>http://localhost:3000/matrikkel/6</tt></a> in your browser!
</p>
<p>
You should get a file named "data" with some RDF. That's a fully working Linked Data server!
</p>



</div>

</body>
</html>